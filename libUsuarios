#ifndef LIBUSUARIOS_H_INCLUDED
#define LIBUSUARIOS_H_INCLUDED
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <string.h>
#include "gotoxy.h" //por el menú

#define arUsuarios "usuarios.dat"

#define DIM 30
typedef struct stUsuario
{
    int idUsuario;
    int tipoUsuario; /// 1 para admin, 0 para usuario normal
    char nombreUsuario[30];
    char pass[20];
    int anioNacimiento;
    char genero;
    char pais[20];
    int eliminado;   // indica 1 o 0 si el cliente fue eliminado
} stUsuario;

//**FUNCIONES USUARIOS //////
//** CARGA DE ARCHIVO DE USUARIOS////
void cargaArchivoUsuario ();
void guardarUsuario(stUsuario u);
int verificacionDeUsuario (char nombre[20]);
int verificacionDeContrasenia (char pass1[20], char pass2[20]);
stUsuario verificaDatos (char nombreUsuario[], char password[]);

//** MUESTRA USUARIOS////
void muestraUnUsuarioFORAdmin (stUsuario u);
void mostrarUsuariosFORAdmin();
void mostrarUsuariosACTIVOSFORAdmin();
void mostrarUsuariosELIMINADOSFORAdmin();
void mostrarUsuariosADMINFORAdmin();
void mostrarUsuariosREGULARESFORAdmin();
void muestraUnUsuarioRegular (stUsuario u);

int Archi2ArrayUsuarios (stUsuario usuarios[DIM], int valids);
void mostrarArrayUsuarios(stUsuario usuarios[], int valids);

//** MODIFICAR USUARIOS////
void modificarTipoUsuario (int id);
void cambiarTipoUsuario(stUsuario u);
void modificarEstadoUsuario (int id);
void cambiarEstadoUsuario(stUsuario u);
void modificarNombreUsuario(int id);
void cambiarNombre(stUsuario u);
void modificarPassUsuario (int id);
void cambiarPassUsuario(stUsuario u);
void modificarGeneroUsuario (int id);
void cambiarGeneroUsuario(stUsuario u);

//** BUSQUEDA DE USUARIOS////
int buscaExistenciaUsuario(int id);
int buscaUltIDUsuario();
stUsuario buscaUsuarioPorID (int id);
stUsuario buscaUsuarioPorNombre (char nombre[]);

//** OTRAS ////
stUsuario LogIn ();
int verificaNombre (char nombre[], int maximoPalabra);
void menuUsuario (stUsuario u);

#endif // LIBUSUARIOS_H_INCLUDED


#include "libUsuarios.h"
#include "libCanciones.h"


//**FUNCIONES USUARIOS //////

//** CARGA DE ARCIHVO DE USUARIOS////
void cargaArchivoUsuario ()
{
    system("color 3B");
    int flag1, flag2;
    char nombreAux[20], pass1[20], pass2[20];
    stUsuario u;
    u.idUsuario = buscaUltIDUsuario();
    if (u.idUsuario==0)
    {
        u.tipoUsuario= 1;
    }
    else
    {
        u.tipoUsuario=0;   ///El primer usuario es forzosamente admin
    }

    if (u.idUsuario<100)
    {
        system("cls");
        printf("\n\n\n\t\t\t °°°C A R G A N D O     D A T O S°°°\n\n\n");
        u.idUsuario++;
        do
        {
            printf("\n ° NOMRE DE USUARIO: \n\n");
            fflush(stdin);
            gets(nombreAux);
            flag1 = verificacionDeUsuario(nombreAux);
            if (flag1 == 0)
            {

                strcpy(u.nombreUsuario, nombreAux);
            }
            else
                printf("\n° EL NOMBRE INGRESADO YA ESTA EN USO. ELIJA OTRO.° ");
        }
        while (flag1 != 0);
        do
        {
            printf("\n ° PASSWORD: \n\n");
            fflush(stdin);
            gets(pass1);
            printf("\n ° REPITA LA PASSWORD: \n\n");
            fflush(stdin);
            gets(pass2);
            flag2 = verificacionDeContrasenia(pass1, pass2);
            if (flag2 ==1)
            {
                strcpy(u.pass, pass1);
            }
            else
                printf("\n ° CONTRASEÑA INCORRECTA. VUELVA A ESCRIBIRLA° ");

        }
        while (flag2 !=1);
        printf("\n ° INGRESE SU AÑO DE NACIMIENTO: \n\n");
        scanf("%d", &u.anioNacimiento);
        printf("\n ° SEXO F/M: \n\n");
        fflush(stdin);
        scanf("%c", &u.genero);
        u.genero= tolower(u.genero);
        printf("\n ° PAIS: ");
        fflush(stdin);
        gets(u.pais);
        u.eliminado=1;
        guardarUsuario(u);


    }
    else
        printf("\n\n DEMASIADOS USUARIS CARGADOS. VUELVA OTRO DIA");
}

void guardarUsuario(stUsuario u)
{
    FILE *pArchUsuarios = fopen(arUsuarios,"ab");


    if(pArchUsuarios != NULL)
    {
        fwrite(&u, sizeof(stUsuario),1, pArchUsuarios);
        fclose(pArchUsuarios);
    }
}


int verificacionDeUsuario (char nombre[20])
{
    stUsuario u;
    int flag = 0;

    FILE * pArchUsuario = fopen(arUsuarios, "rb");

    if (pArchUsuario != NULL)
    {

        while (fread(&u, sizeof(stUsuario),1, pArchUsuario)>0)
        {

            if (strcmpi(u.nombreUsuario, nombre) ==0)
            {
                flag = 1;
            }

        }
        fclose(pArchUsuario);
    }
    return flag;
}

int verificacionDeContrasenia (char pass1[20], char pass2[20])
{

    int flag = 0;

    if (strcmpi(pass1, pass2) ==0)
    {
        flag = 1;
    }


    return flag;
}


stUsuario verificaDatos (char nombreUsuario[], char password[])
{
    stUsuario u;
    int flag=0;

    FILE*pArchiUsuario = fopen(arUsuarios, "rb");
    if (pArchiUsuario!=NULL)
    {
        while (flag!=1 && (fread(&u, sizeof(stUsuario), 1, pArchiUsuario)>0))
        {
            if ((strcmpi (u.nombreUsuario, nombreUsuario)==0) && (strcmpi (u.pass, password)==0))
            {
                flag=1;
            }

        }

        if (flag==0)
        {
            u.idUsuario=-1;
        }
    }
    return u;
}


//** MUESTRA USUARIOS////
void muestraUnUsuarioFORAdmin (stUsuario u)
{

    printf("\n º Id_._._._.:%d", u.idUsuario);
    printf("\n º Nombre_._.:%s", u.nombreUsuario);
    printf("\n º Pass_._._.:%s", u.pass);
    printf("\n º Anio_._._.:%d", u.anioNacimiento);
    printf("\n º Sexo_._._.:%c", u.genero);
    printf("\n º Pais_._._.:%s", u.pais);


    if (u.eliminado==1)
    {
        printf("\n º Estado de cuenta_._._.:Activo");
    }
    else
    {
        printf("\n º Estado de cuenta_._._.:Eliminado");
    }
    if (u.tipoUsuario==1)
    {
        printf("\n º Tipo de cuenta_._._.:Administrador");
    }
    else
    {
        printf("\n º Tipo de cuenta_._._.:Usuario");
    }
    printf("\n\n\n");
}

void mostrarUsuariosFORAdmin ()
{
    stUsuario u;
    system("cls");
    FILE*pArchUsuario = fopen(arUsuarios, "rb");
    if (pArchUsuario !=NULL)
    {
        while (fread(&u, sizeof(stUsuario), 1, pArchUsuario)>0)
        {
            muestraUnUsuarioFORAdmin(u);
        }
    }
}

void mostrarUsuariosACTIVOSFORAdmin()

{
    stUsuario u;
    system("cls");
    FILE*pArchUsuario = fopen(arUsuarios, "rb");
    if (pArchUsuario !=NULL)
    {
        while (fread(&u, sizeof(stUsuario), 1, pArchUsuario)>0)
        {
            if (u.eliminado==1)
            {
                muestraUnUsuarioFORAdmin(u);
            }
        }
    }
}

void mostrarUsuariosELIMINADOSFORAdmin()

{
    stUsuario u;
    system("cls");
    FILE*pArchUsuario = fopen(arUsuarios, "rb");
    if (pArchUsuario !=NULL)
    {
        while (fread(&u, sizeof(stUsuario), 1, pArchUsuario)>0)
        {
            if (u.eliminado==0)
            {
                muestraUnUsuarioFORAdmin(u);
            }
        }
    }
}

void mostrarUsuariosADMINFORAdmin()

{
    stUsuario u;
    system("cls");
    FILE*pArchUsuario = fopen(arUsuarios, "rb");
    if (pArchUsuario !=NULL)
    {
        while (fread(&u, sizeof(stUsuario), 1, pArchUsuario)>0)
        {
            if (u.tipoUsuario==1)
            {
                muestraUnUsuarioFORAdmin(u);
            }
        }
    }
}
void mostrarUsuariosREGULARESFORAdmin()
{
    stUsuario u;
    system("cls");
    FILE*pArchUsuario = fopen(arUsuarios, "rb");
    if (pArchUsuario !=NULL)
    {
        while (fread(&u, sizeof(stUsuario), 1, pArchUsuario)>0)
        {
            if (u.tipoUsuario==0)
            {
                muestraUnUsuarioFORAdmin(u);
            }
        }
    }
}

void muestraUnUsuarioRegular (stUsuario u)
{

    printf("\n º Nombre_._.:%s", u.nombreUsuario);
    printf("\n º Pass_._._.:%s", u.pass);
    printf("\n º Anio_._._.:%d", u.anioNacimiento);
    printf("\n º Sexo_._._.:%c", u.genero);
    printf("\n º Pais_._._.:%s", u.pais);
    printf("\n\n\n");
}

int Archi2ArrayUsuarios (stUsuario usuarios[DIM], int valids)
{
    stUsuario u;

    FILE*pArchiUsuario = fopen(arUsuarios, "rb");
    if (pArchiUsuario!=NULL)
    {
        while (valids<DIM && fread(&u, sizeof(stUsuario), 1, pArchiUsuario)>0)
        {
            usuarios[valids]= u;
            valids++;
        }
        fclose(pArchiUsuario);
    }
    return valids;

}

void mostrarArrayUsuarios(stUsuario usuarios[], int valids)
{
    int i=0;

    for (i=0; i<valids; i++)
    {
        muestraUnUsuarioFORAdmin(usuarios[i]);
    }
}



//** MODIFICAR USUARIOS////
void modificarTipoUsuario (int id)
{
    stUsuario u;
    FILE*pArchiUsuario = fopen(arUsuarios,"r+b");
    if (pArchiUsuario!=NULL)
    {
        u=buscaUsuarioPorID(id);
        if (id!=-1)
        {

            cambiarTipoUsuario(u);
        }
        else
        {
            printf("\n\t ° EL USUARIO NO EXISTE °\n");

        }
        fclose(pArchiUsuario);
    }
}

void cambiarTipoUsuario(stUsuario u) ///AUX de Modificar Tipo Usuario
{
    int confirmacion;
    FILE*pArchiUsuario  = fopen(arUsuarios,"r+b");
    if (pArchiUsuario!=NULL)
    {
        printf("\n\t° ESTA SEGURO DE QUERER MODIFICAR EL USUARIO? °\n");
        printf("SI (1), NO(2): ");
        scanf("%d",&confirmacion);
        if (confirmacion==1)
        {
            if (u.tipoUsuario==0)
            {
                u.tipoUsuario=1;
            }
            else
            {
                u.tipoUsuario=0;
            }
            fseek(pArchiUsuario,sizeof(stUsuario)*u.idUsuario,SEEK_SET);
            fwrite(&u,sizeof(stUsuario),1,pArchiUsuario);
            printf( "\n\t ° TIPO DE USUARIO MODIFICADO CON EXITO- YAY!! °\n");
            muestraUnUsuarioFORAdmin(u);
        }
        else
        {
            printf("\n\t ° UPSI!- SE HA PRODUCIDO UN ERROR °\n");
        }
        fclose(pArchiUsuario);
    }
}

void modificarEstadoUsuario (int id)
{
    stUsuario u;
    FILE*pArchiUsuario = fopen(arUsuarios,"r+b");
    if (pArchiUsuario!=NULL)
    {
        u=buscaUsuarioPorID(id);
        if (id!=-1)
        {

            cambiarEstadoUsuario(u);
        }
        else
        {
            printf("\n\t ° EL USUARIO NO EXISTE °\n");
        }

        fclose(pArchiUsuario);
    }
}

void cambiarEstadoUsuario(stUsuario u) ///AUX de Modificar Estado Usuario
{
    int confirmacion;
    FILE*pArchiUsuario  = fopen(arUsuarios,"r+b");
    if (pArchiUsuario!=NULL)
    {
        printf("\n\t° ESTA SEGURO DE QUERER MODIFICAR EL USUARIO? °\n");
        printf("SI (1), NO(2): ");
        scanf("%d",&confirmacion);
        if (confirmacion==1)
        {
            if (u.eliminado==0)
            {
                u.eliminado=1;
            }
            else
            {
                u.eliminado=0;
            }
            fseek(pArchiUsuario,sizeof(stUsuario)*u.idUsuario,SEEK_SET);
            fwrite(&u,sizeof(stUsuario),1,pArchiUsuario);
            printf( "\n\t ° ESTADO MODIFICADO CON EXITO- YAY!! °\n");
            muestraUnUsuarioFORAdmin(u);
        }
        else
        {
            printf("\n\t ° UPSI!- SE HA PRODUCIDO UN ERROR °\n");
        }
        fclose(pArchiUsuario);
    }
}

void modificarNombreUsuario(int id)
{
    stUsuario u;
    int auxid;
    FILE*pArchiUsuarios = fopen(arUsuarios,"r+b");
    if (pArchiUsuarios!=NULL)
    {
        auxid = buscaExistenciaUsuario(id);
        id= auxid;
        if (id!=-1)
        {
            u=buscaUsuarioPorID(id);
            cambiarNombre(u);
        }
        else
        {
            printf("el Usuario no existe");
        }

        fclose(pArchiUsuarios);
    }
}

void cambiarNombre(stUsuario u) ///AUX de Modificar Nombre
{
    int respuesta;
    int dimNombre=30;
    char name[dimNombre];
    int val;
    FILE*pArchiUsuarios = fopen(arUsuarios,"r+b");
    if (pArchiUsuarios!=NULL)
    {
        printf("Seguro desea modificar este dato? Si (1)/No(2): ");
        scanf("%d",&respuesta);
        if (respuesta==1)
        {

            do
            {
                printf("\n ° INGRESE UN NUEVO NOMBRE_._._._.: ");
                fflush(stdin);
                gets(name);
                val=verificaNombre (name, dimNombre);
                if (val == 0)
                {
                    printf("\n\t° ESE USUARIO A EXISTE.°\n");

                }
            }
            while (val==0);
            strcpy(u.nombreUsuario, name);
            fseek(pArchiUsuarios,sizeof(stUsuario)*u.idUsuario,SEEK_SET);
            fwrite(&u,sizeof(stUsuario),1,pArchiUsuarios);
            printf( "\n\t° USUARIO MODIFICADO CON EXITO °\n");
        }
        else
        {
            printf("\n\t° EL USUARIO NO HA SIDO MODIFICADO °\n");
        }
        fclose(pArchiUsuarios);
    }
}

void modificarPassUsuario (int id)
{
    stUsuario u;
    FILE*pArchiUsuario = fopen(arUsuarios,"r+b");
    if (pArchiUsuario!=NULL)
    {
        u=buscaUsuarioPorID(id);
        if (id!=-1)
        {

            cambiarPassUsuario(u);
        }
        else
        {

            printf("\n\t ° EL USUARIO NO EXISTE °\n");
        }

        fclose(pArchiUsuario);
    }
}

void cambiarPassUsuario(stUsuario u) ///AUX de Modificar Genero Usuario
{
    int confirmacion;
    int flag2=0;
    char pass1[20], pass2[20];
    FILE*pArchiUsuario  = fopen(arUsuarios,"r+b");
    if (pArchiUsuario!=NULL)
    {
        printf("\n\t° ESTA SEGURO DE QUERER MODIFICAR EL USUARIO? °\n");
        printf("SI (1), NO(2): ");
        scanf("%d",&confirmacion);
        if (confirmacion==1)
        {
            do
            {
                printf("\n ° PASSWORD: \n\n");
                fflush(stdin);
                gets(pass1);
                printf("\n ° REPITA LA PASSWORD: \n\n");
                fflush(stdin);
                gets(pass2);
                flag2 = verificacionDeContrasenia(pass1, pass2);
                if (flag2 ==1)
                {
                    strcpy(u.pass, pass1);
                }
                else
                    printf("\n ° CONTRASEÑA INCORRECTA. VUELVA A ESCRIBIRLA° ");

            }
            while (flag2 !=1);
            fseek(pArchiUsuario,sizeof(stUsuario)*u.idUsuario,SEEK_SET);
            fwrite(&u,sizeof(stUsuario),1,pArchiUsuario);
            printf( "\n\t ° PASSWORD MODIFICADA CON EXITO- YAY!! °\n");
            muestraUnUsuarioFORAdmin(u);
        }
        else
        {
            printf("\n\t ° UPSI!- SE HA PRODUCIDO UN ERROR °\n");
        }
        fclose(pArchiUsuario);
    }
}

void modificarGeneroUsuario (int id)
{
    stUsuario u;
    FILE*pArchiUsuario = fopen(arUsuarios,"r+b");
    if (pArchiUsuario!=NULL)
    {
        u=buscaUsuarioPorID(id);
        if (id!=-1)
        {

            cambiarGeneroUsuario(u);
        }
        else
        {

            printf("\n\t ° EL USUARIO NO EXISTE °\n");
        }

        fclose(pArchiUsuario);
    }
}

void cambiarGeneroUsuario(stUsuario u) ///AUX de Modificar Genero Usuario
{
    int confirmacion;
    FILE*pArchiUsuario  = fopen(arUsuarios,"r+b");
    if (pArchiUsuario!=NULL)
    {
        printf("\n\t° ESTA SEGURO DE QUERER MODIFICAR EL USUARIO? °\n");
        printf("SI (1), NO(2): ");
        scanf("%d",&confirmacion);
        if (confirmacion==1)
        {
            if (u.genero=='f')
            {
                u.genero='m';
            }
            else
            {
                u.genero='f';
            }
            fseek(pArchiUsuario,sizeof(stUsuario)*u.idUsuario,SEEK_SET);
            fwrite(&u,sizeof(stUsuario),1,pArchiUsuario);
            printf( "\n\t ° GENERO MODIFICADO CON EXITO- YAY!! °\n");
            muestraUnUsuarioFORAdmin(u);
        }
        else
        {
            printf("\n\t ° UPSI!- SE HA PRODUCIDO UN ERROR °\n");
        }
        fclose(pArchiUsuario);
    }
}

//** BUSQUEDA DE USUARIOS////
int buscaExistenciaUsuario (int id) ///SI EL ID EXISTE DEVUELVE EL ID DEL USUARIO
{
    stUsuario u;
    int flag=0;
    FILE*pArchiUsuarios = fopen(arUsuarios, "rb");

    if (pArchiUsuarios!=NULL)
    {
        while (flag==0 && (fread(&u, sizeof(stUsuario), 1, pArchiUsuarios)>0))
        {
            if (u.idUsuario == id)
            {
                flag = 1;
            }
        }
        fclose(pArchiUsuarios);
    }
    if (flag==0)
    {
        u.idUsuario=-1;
    }
    return id;
}
int buscaUltIDUsuario ()
{
    stUsuario u;
    int id = -1;
    FILE *pArchUsuario = fopen(arUsuarios, "rb");

    if (pArchUsuario != NULL)
    {

        fseek(pArchUsuario, sizeof (stUsuario) * -1, SEEK_END);
        if (fread(&u, sizeof (stUsuario),1, pArchUsuario) >0)
        {
            id = u.idUsuario;
        }
        else
        {
            id=-1;
        }
        fclose(pArchUsuario);
    }
    return id;
}

stUsuario buscaUsuarioPorID (int id)
{
    stUsuario u;
    int flag =0;
    FILE * pArchUsuario = fopen(arUsuarios, "rb");

    if (pArchUsuario != NULL)
    {

        while ((flag ==0) && (fread(&u, sizeof(stUsuario), 1, pArchUsuario) >0))
        {

            if (id == u.idUsuario)
            {

                flag =1;
            }
        }
        fclose(pArchUsuario);

    }
    if (flag ==0)
    {

        u.idUsuario = -1;
    }
    return u;
}

stUsuario buscaUsuarioPorNombre (char nombre[]) ///revisar en el tp de la comision
{
    stUsuario u;
    //stUsuario user;
    int flag =0;

    FILE * pArchUsuario = fopen(arUsuarios, "rb");

    if (pArchUsuario != NULL)
    {

        while ((flag ==0) && (fread(&u, sizeof(stUsuario), 1, pArchUsuario) >0))
        {

            if (strcmpi (nombre, u.nombreUsuario) == 0)
            {
                flag =1;
                //user= u;
            }
        }
        fclose(pArchUsuario);
    }

    return u;
}


//** OTRAS ////
stUsuario LogIn ()  ///retorna ESTRUCTURA de usuario
{
    stUsuario user1;
    char nombreUsuario1[30], pass1[30];
    int flag=0, id;

    do
    {
        system("color 5F");
        system("cls");
        printf("\n\n\n\t\t\t ° ° ° EMPOWIFY ° ° °\n\n\t\t\t\t\t°° CANCIONES QUE EMPODERAN °°\n\n");
        gotoxy(30,8);
        printf("°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°\n");
        gotoxy(30,9);
        printf("°                                                °");
        gotoxy(30,10);

        printf("°                                                °");
        gotoxy(30,11);
        printf("°      USUARIO:                                  °");
        gotoxy(30,12);
        printf("°                                                °");
        gotoxy(30,13);
        printf("°     PASSWORD:                                  °");
        gotoxy(30,14);
        printf("°                                                °");
        gotoxy(30,15);
        printf("°                                                °");

        gotoxy(30,16);
        printf("°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°°\n");
        gotoxy(45, 11);
        fflush(stdin);
        gets(nombreUsuario1);

        id=verificaNombre(nombreUsuario1, 30);

        if (user1.idUsuario!=-1)
        {

            user1=buscaUsuarioPorID(id);
        }
        else
        {
            printf("\n\t° EL USUARIO NO EXISTE °\n");
        }

        gotoxy(49, 13);
        fflush(stdin);
        gets(pass1);
        if (strcmpi(pass1, user1.pass)!=0)
        {

            gotoxy(4, 18);
            printf("\n\t° PASSWORD INCORRECTA INTENTE DE NUEVO °\n");
            system("pause");
            flag=0;
        }
        else
        {
            flag=1;
        }

    }
    while(flag==0);
    return user1;
}

int verificaNombre (char nombre[], int maximoPalabra) ///RETORNA ID \SINO RETORNA -1
{
    int flag=1, id=-1;
    stUsuario u;

    FILE*pArchiUsuarios = fopen(arUsuarios, "rb");
    if (pArchiUsuarios!=NULL)
    {
        while (flag==1 && (fread(&u, sizeof(stUsuario), 1, pArchiUsuarios)>0))
        {
            if  (strcmp(u.nombreUsuario, nombre)!=0)
            {
                flag=1;
            }
            else
            {
                flag=0;
                id=u.idUsuario;
            }
        }
        fclose(pArchiUsuarios);
    }
    return id;
}


void menuUsuario (stUsuario u)
{

    if (u.tipoUsuario==1)
    {
        printf("\n\tY AHORA?-");
        printf("\n\t1.- AGREGAR UNA CANCION-");
        printf("\n\t2.- MODIFICAR UNA CANCION-");
        printf("\n\t3.- MODIFICAR TIPO DE USUARIO-");
        printf("\n\t4.- DAR DE BAJA USUARIO-");
    }
    else if (u.tipoUsuario==0)
    {
        printf("\n\tY AHORA?-");
        printf("\n\t1.- CREAR UNA PLAYLIST-");
        printf("\n\t2.- AGREGAR UNA CANCION A LA PLAYLIST-");
        printf("\n\t3.- ESCUCHAR UNA PLAYLIST-");
        printf("\n\t4.- CONFIGURAR PERFIL-");
    }
}
